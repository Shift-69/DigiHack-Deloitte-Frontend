[{"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\index.js":"1","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\App.js":"2","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\map\\harta.js":"3","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\Expenses.js":"4","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\NewExpense\\NewExpense.js":"5","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\NewExpense\\ExpenseForm.js":"6","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpensesList.js":"7","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpensesChart.js":"8","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\UI\\Card.js":"9","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\utils.js":"10","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpensesFilter.js":"11","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpenseItem.js":"12","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Chart\\Chart.js":"13","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpenseDate.js":"14","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Chart\\ChartBar.js":"15","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\UI\\ErrorModal.js":"16"},{"size":206,"mtime":1648226697000,"results":"17","hashOfConfig":"18"},{"size":2218,"mtime":1650169717918,"results":"19","hashOfConfig":"18"},{"size":3917,"mtime":1650167151283,"results":"20","hashOfConfig":"18"},{"size":1176,"mtime":1650172140415,"results":"21","hashOfConfig":"18"},{"size":968,"mtime":1650167562687,"results":"22","hashOfConfig":"18"},{"size":8535,"mtime":1650167609528,"results":"23","hashOfConfig":"18"},{"size":849,"mtime":1650135126339,"results":"24","hashOfConfig":"18"},{"size":794,"mtime":1650135043628,"results":"25","hashOfConfig":"18"},{"size":205,"mtime":1648226697000,"results":"26","hashOfConfig":"18"},{"size":607,"mtime":1650166944272,"results":"27","hashOfConfig":"18"},{"size":638,"mtime":1650171431756,"results":"28","hashOfConfig":"18"},{"size":696,"mtime":1650161293751,"results":"29","hashOfConfig":"18"},{"size":544,"mtime":1648226697000,"results":"30","hashOfConfig":"18"},{"size":532,"mtime":1648226697000,"results":"31","hashOfConfig":"18"},{"size":535,"mtime":1648226697000,"results":"32","hashOfConfig":"18"},{"size":827,"mtime":1650135613837,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fw7g1q",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"41"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\index.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\App.js",["71","72"],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\map\\harta.js",["73","74","75"],"import react, { useRef, useEffect } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { convertAddressToCoordintates } from \"../../utils\";\r\n// import classes from './harta.module.css';\r\n\r\nfunction initMap(param) {\r\n    const myLatLng = { lat: 44.4234633061 , lng: 26.1013029281 };\r\n    const mapElement = document.getElementById(\"map\");\r\n\r\n    const map = new window.google.maps.Map(mapElement, {\r\n        zoom: 12,\r\n        center: myLatLng,\r\n        styles: [\r\n            { elementType: \"geometry\", stylers: [{ color: \"#242f3e\" }] },\r\n            { elementType: \"labels.text.stroke\", stylers: [{ color: \"#242f3e\" }] },\r\n            { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\r\n            {\r\n                featureType: \"administrative.locality\",\r\n                elementType: \"labels.text.fill\",\r\n                stylers: [{ color: \"#d59563\" }],\r\n            },\r\n            {\r\n                featureType: \"poi\",\r\n                elementType: \"labels.text.fill\",\r\n                stylers: [{ color: \"#d59563\" }],\r\n            },\r\n            {\r\n                featureType: \"poi.park\",\r\n                elementType: \"geometry\",\r\n                stylers: [{ color: \"#263c3f\" }],\r\n            },\r\n            {\r\n                featureType: \"poi.park\",\r\n                elementType: \"labels.text.fill\",\r\n                stylers: [{ color: \"#6b9a76\" }],\r\n            },\r\n            {\r\n                featureType: \"road\",\r\n                elementType: \"geometry\",\r\n                stylers: [{ color: \"#38414e\" }],\r\n            },\r\n            {\r\n                featureType: \"road\",\r\n                elementType: \"geometry.stroke\",\r\n                stylers: [{ color: \"#212a37\" }],\r\n            },\r\n            {\r\n                featureType: \"road\",\r\n                elementType: \"labels.text.fill\",\r\n                stylers: [{ color: \"#9ca5b3\" }],\r\n            },\r\n            {\r\n                featureType: \"road.highway\",\r\n                elementType: \"geometry\",\r\n                stylers: [{ color: \"#746855\" }],\r\n            },\r\n            {\r\n                featureType: \"road.highway\",\r\n                elementType: \"geometry.stroke\",\r\n                stylers: [{ color: \"#1f2835\" }],\r\n            },\r\n            {\r\n                featureType: \"road.highway\",\r\n                elementType: \"labels.text.fill\",\r\n                stylers: [{ color: \"#f3d19c\" }],\r\n            },\r\n            {\r\n                featureType: \"transit\",\r\n                elementType: \"geometry\",\r\n                stylers: [{ color: \"#2f3948\" }],\r\n            },\r\n            {\r\n                featureType: \"transit.station\",\r\n                elementType: \"labels.text.fill\",\r\n                stylers: [{ color: \"#d59563\" }],\r\n            },\r\n            {\r\n                featureType: \"water\",\r\n                elementType: \"geometry\",\r\n                stylers: [{ color: \"#17263c\" }],\r\n            },\r\n            {\r\n                featureType: \"water\",\r\n                elementType: \"labels.text.fill\",\r\n                stylers: [{ color: \"#515c6d\" }],\r\n            },\r\n            {\r\n                featureType: \"water\",\r\n                elementType: \"labels.text.stroke\",\r\n                stylers: [{ color: \"#(17263c\" }],\r\n            },\r\n        ],\r\n    });\r\n\r\n//     console.log(\"locations\", locations)\r\n    \r\n//    locations.forEach(async(location, i)=>{\r\n\r\n//     console.log(\"position\",  await convertAddressToCoordintates(location.address) )\r\n    \r\n    for(let i=0;i<param.length;i++){\r\n        new window.google.maps.Marker({\r\n    \r\n            position: param[i],\r\n            map,\r\n            label: `${i + 1}`,\r\n\r\n        })\r\n    }\r\n    \r\n\r\n}\r\n\r\nconst Harta = (props) => {\r\n    const mapRef = useRef();\r\n    useEffect(() => { initMap(props.markere) }, [props.markere]);\r\n    return <>\r\n        <div id='map' ref={mapRef}></div>\r\n    </>\r\n}\r\n\r\nexport default Harta;",["76","77"],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\Expenses.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\NewExpense\\NewExpense.js",["78"],"import React, { useState } from 'react';\n\nimport ExpenseForm from './ExpenseForm';\nimport './NewExpense.css';\n\nconst NewExpense = (props) => {\n  const [isEditing, setIsEditing] = useState(false);\n\n  const saveExpenseDataHandler = (enteredExpenseData) => {\n    const expenseData = {\n      ...enteredExpenseData,\n      id: Math.random().toString(),\n    };\n    props.onAddExpense(expenseData);\n    setIsEditing(false);\n  };\n\n  const startEditingHandler = () => {\n    setIsEditing(true);\n  };\n\n  const stopEditingHandler = () => {\n    setIsEditing(false);\n  };\n\n  return (\n    <div className='new-expense'>\n      {!isEditing && (\n        <button onClick={startEditingHandler}>Adaugă anunț</button>\n      )}\n      {isEditing && (\n        <ExpenseForm\n          marks={props.marks}\n          setMark={props.setMark}\n          onSaveExpenseData={props.onAddExpense}\n          onCancel={stopEditingHandler}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default NewExpense;\n","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\NewExpense\\ExpenseForm.js",["79","80"],"import React, { useState } from 'react';\n\nimport './ExpenseForm.css';\nimport Geocode from \"react-geocode\";\nimport ErrorModal from '../UI/ErrorModal';\n\nconst ExpenseForm = (props) => {\n  const [error, setError] = useState();\n  // const [enteredTitle, setEnteredTitle] = useState('');\n  // const [enteredAmount, setEnteredAmount] = useState('');\n\n  const [enteredTip, setEnteredTip] = useState('');\n  const [enteredSpecie, setEnteredSpecie] = useState('');\n  const [enteredNume, setEnteredNume] = useState('');\n  const [enteredCuloare, setEnteredCuloare] = useState('');\n  const [enteredRasa, setEnteredRasa] = useState('');\n  const [enteredMarime, setEnteredMarime] = useState('');\n  const [enteredMail, setEnteredMail] = useState('');\n  const [enteredTel, setEnteredTel] = useState('');\n  const [enteredRecompensa, setEnteredRecompensa] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  const [enteredAdresa, setEnteredAdresa] = useState('');\n  const [enteredPhoto, setEnteredPhoto] = useState('');\n\n  \n\n  let expenseData;\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: '',\n  //   enteredAmount: '',\n  //   enteredDate: '',\n  // });\n\n\n\n  const adresaHandler = (event) => {\n    setEnteredAdresa(event.target.value);\n  }\n  const tipAnuntHandler = (event) => {\n    setEnteredTip(event.target.value);\n  }\n  const specieHandler = (event) => {\n    setEnteredSpecie(event.target.value);\n  }\n  const numeHandler = (event) => {\n    setEnteredNume(event.target.value);\n  }\n  const culoareHandler = (event) => {\n    setEnteredCuloare(event.target.value);\n  }\n  const rasaHandler = (event) => {\n    setEnteredRasa(event.target.value);\n  }\n  const marimeHandler = (event) => {\n    setEnteredMarime(event.target.value);\n  }\n  const mailHandler = (event) => {\n    setEnteredMail(event.target.value);\n  }\n  const telHandler = (event) => {\n    setEnteredTel(event.target.value);\n  }\n  const recompensaHandler = (event) => {\n    setEnteredRecompensa(event.target.value);\n  }\n\n  const photoHandler = (event) => {\n    setEnteredPhoto(event.target.value);\n  }\n\n\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n\n  };\n\n\n  // console.log(props.marks);\n\n  // const buc = {lat: 44.4234633061, lng: 26.1013029281};\n  // const getDistance = (buc) =>{\n  //     const offset = (5*360)/40075;\n\n  // };\n\n\n  const submitHandler = (event) => {\n    Geocode.setApiKey(\"AIzaSyACWSoOTQIUtgqwpas9vEUKWN0Jg_sQ2E0\");\n\n    Geocode.setLanguage(\"en\");\n    Geocode.setLocationType(\"ROOFTOP\");\n    Geocode.enableDebug();\n\n    const noulMarker =  Geocode.fromAddress(`${enteredAdresa}`).then(\n      (response) => {\n        const { lat, lng } = response.results[0].geometry.location;\n        props.setMark(prevMark => {\n          return [...prevMark, {lat, lng}]\n        });\n        });\n\n\n    expenseData = {\n      // title: enteredTitle,\n      // amount: enteredAmount,\n      tip: enteredTip,\n      specie: enteredSpecie,\n      nume: enteredNume,\n      culoare: enteredCuloare,\n      rasa: enteredRasa,\n      marime: enteredMarime,\n      email: enteredMail,\n      tel: enteredTel,\n      recompensa: enteredRecompensa,\n      date: new Date(enteredDate),\n      adresa: enteredAdresa\n    };\n\n    event.preventDefault();\n\n\n    if (enteredTip.toLowerCase() !== \"pierdut\" &&\n      enteredTip.toLowerCase() !== \"gasit\") {\n      setError({\n        title: \"Input invalid!\",\n        message: \"Adaugati un tip valid de mesaj!\"\n      });\n      return;\n    }\n\n    if (enteredSpecie.trim().length === 0) {\n      setError({\n        title: \"Input invalid!\",\n        message: \"Adaugati specia animalului!\"\n      });\n      return;\n    }\n\n    if (enteredMail.trim().length === 0) {\n      setError({\n        title: \"Input invalid!\",\n        message: \"Adaugati emailul!\"\n      });\n      return;\n    }\n\n    if (enteredTel.trim().length === 0) {\n      setError({\n        title: \"Input invalid!\",\n        message: \"Adaugati numarul de telefon!\"\n      });\n      return;\n    }\n\n    if (enteredCuloare.trim().length === 0) {\n      setError({\n        title: \"Input invalid!\",\n        message: \"Adaugati culoarea!\"\n      });\n      return;\n    }\n\n\n\n\n    setEnteredTip('');\n    setEnteredSpecie('');\n    setEnteredNume('');\n    setEnteredCuloare('');\n    setEnteredRasa('');\n    setEnteredMarime('');\n    setEnteredMail('');\n    setEnteredTel('');\n    setEnteredRecompensa('');\n    setEnteredDate('');\n    setEnteredAdresa('');\n  };\n\n  const errorHandler = () => {\n    setError(null);\n  }\n\n  return (\n    <div>\n      {error && <ErrorModal title={error.title}\n        message={error.message}\n        onConfirm={errorHandler} />}\n      <form onSubmit={submitHandler}>\n        <div className='new-expense__controls'>\n          <div className='new-expense__control'>\n            <label>Tip anunt (pierdut/găsit)* </label>\n            <input\n              type='text'\n              value={enteredTip}\n              onChange={tipAnuntHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>Specie*</label>\n            <input\n              type='text'\n              value={enteredSpecie}\n              onChange={specieHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>Nume animal</label>\n            <input\n              type='text'\n              value={enteredNume}\n              onChange={numeHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>Culoare*</label>\n            <input\n              type='text'\n              value={enteredCuloare}\n              onChange={culoareHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>Rasa</label>\n            <input\n              type='text'\n              value={enteredRasa}\n              onChange={rasaHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>Mărime</label>\n            <input\n              type='text'\n              value={enteredMarime}\n              onChange={marimeHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>Adresa*</label>\n            <input\n              type='text'\n              value={enteredAdresa}\n              onChange={adresaHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>E-mail*</label>\n            <input\n              type='text'\n              value={enteredMail}\n              onChange={mailHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>Număr de telefon*</label>\n            <input\n              type='text'\n              value={enteredTel}\n              onChange={telHandler}\n            />\n          </div>\n\n\n\n          <div className='new-expense__control'>\n            <label>Recompensa (RON)</label>\n            <input\n              type='number'\n              min='0.00'\n              step='10'\n              value={enteredRecompensa}\n              onChange={recompensaHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>Link poză</label>\n            <input\n              type='text'\n              value={enteredPhoto}\n              onChange={photoHandler}\n            />\n          </div>\n\n          <div className='new-expense__control'>\n            <label>Date*</label>\n            <input\n              type='date'\n              min='2019-01-01'\n              max='2022-12-31'\n              value={enteredDate}\n              onChange={dateChangeHandler}\n            />\n          </div>\n\n\n        </div>\n        <div className='new-expense__actions'>\n          <button type=\"button\" onClick={props.onCancel}>Anulează</button>\n          <button type='submit' onClick={() => {\n            props.onSaveExpenseData({\n              // title: enteredTitle,\n              // amount: enteredAmount,\n              tip: enteredTip,\n              specie: enteredSpecie,\n              nume: enteredNume,\n              culoare: enteredCuloare,\n              rasa: enteredRasa,\n              marime: enteredMarime,\n              email: enteredMail,\n              tel: enteredTel,\n              recompensa: enteredRecompensa,\n              date: new Date(enteredDate),\n              adresa: enteredAdresa\n            });\n          }}>Adaugă</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ExpenseForm;\n","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpensesList.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpensesChart.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\UI\\Card.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\utils.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpensesFilter.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpenseItem.js",["81"],"import React from 'react';\n\nimport ExpenseDate from './ExpenseDate';\nimport Card from '../UI/Card';\nimport './ExpenseItem.css';\n\nconst ExpenseItem = (props) => {\n  return (\n    <li>\n      <Card className='expense-item'>\n        <ExpenseDate date={props.date} />\n        <div className='expense-item__description'>\n          <p>{props.tip} {props.specie} {props.rasa} cu numele {props.nume} zona {props.adresa}.</p>\n          <p>Contact: {props.tel}, {props.email}</p>\n          <img src={props.photo}></img>\n          {props.tip.toLowerCase()===\"pierdut\" && <div className='expense-item__price'>RON{props.amount}</div>}\n        </div>\n      </Card>\n    </li>\n  );\n};\n\nexport default ExpenseItem;\n","D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Chart\\Chart.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Expenses\\ExpenseDate.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\Chart\\ChartBar.js",[],"D:\\code\\react-complete-guide-code-05-rendering-lists-conditional-content\\code\\06-finished\\src\\components\\UI\\ErrorModal.js",[],{"ruleId":"82","severity":1,"message":"83","line":9,"column":7,"nodeType":"84","messageId":"85","endLine":9,"endColumn":20},{"ruleId":"82","severity":1,"message":"86","line":36,"column":9,"nodeType":"84","messageId":"85","endLine":36,"endColumn":26},{"ruleId":"82","severity":1,"message":"87","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},{"ruleId":"82","severity":1,"message":"88","line":2,"column":10,"nodeType":"84","messageId":"85","endLine":2,"endColumn":16},{"ruleId":"82","severity":1,"message":"89","line":3,"column":10,"nodeType":"84","messageId":"85","endLine":3,"endColumn":38},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"82","severity":1,"message":"94","line":9,"column":9,"nodeType":"84","messageId":"85","endLine":9,"endColumn":31},{"ruleId":"82","severity":1,"message":"95","line":27,"column":7,"nodeType":"84","messageId":"85","endLine":27,"endColumn":18},{"ruleId":"82","severity":1,"message":"96","line":94,"column":11,"nodeType":"84","messageId":"85","endLine":94,"endColumn":21},{"ruleId":"97","severity":1,"message":"98","line":15,"column":11,"nodeType":"99","endLine":15,"endColumn":34},"no-unused-vars","'DUMMY_ANIMALS' is assigned a value but never used.","Identifier","unusedVar","'addExpenseHandler' is assigned a value but never used.","'react' is defined but never used.","'Helmet' is defined but never used.","'convertAddressToCoordintates' is defined but never used.","no-native-reassign",["100"],"no-negated-in-lhs",["101"],"'saveExpenseDataHandler' is assigned a value but never used.","'expenseData' is assigned a value but never used.","'noulMarker' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]